# Script to find files matching known malicious SHA-256 hashes
# Must be run in an elevated PowerShell window

# Bypass execution policy for this session
Set-ExecutionPolicy Bypass -Scope Process -Force

Write-Host "[+] Starting system scan for files matching known malicious hashes..." -ForegroundColor Green
Write-Host "[+] This will check every file on your C: drive. It will take HOURS." -ForegroundColor Yellow
Write-Host "[+] Please be patient and let it run to completion." -ForegroundColor Yellow

# Define the known malicious SHA-256 hashes from the report
$MaliciousHashes = @(
    "de0e25a3e6c1e1e5998b306b7141b3dc4c0088da9d7bb47c1c00c91e6e4f85d6",
    "81d2a004a1bca6ef87a1caf7d0e0b355ad1764238e40ff6d1b1cb77ad4f595c3",
    "83a650ce44b2a9854802a7fb4c202877815274c129af49e6c2d1d5d5d55c501e",
    "4b2399646573bb737c4969563303d8ee2e9ddbd1b271f1ca9e35ea78062538db",
    "dc67467a39b70d1cd4c1f7f7a459b35058163592f4a9e8fb4dffcbba98ef210c",
    "46faab8ab153fae6e80e7cca38eab363075bb524edd79e42269217a083628f09",
    "b74caeaa75e077c99f7d44f46daaf9796a3be43ecf24f2a1fd381844669da777"
)

# Counter for progress
$FileCount = 0
$MatchCount = 0

# Get all files on the C: drive
$AllFiles = Get-ChildItem -Path C:\ -File -Recurse -ErrorAction SilentlyContinue

Write-Host "[+] Found $($AllFiles.Count) files to check." -ForegroundColor Cyan

foreach ($File in $AllFiles) {
    $FileCount++
    # Calculate progress percentage
    $Progress = ($FileCount / $AllFiles.Count) * 100

    # Update progress every 1000 files to avoid massive slowdown
    if ($FileCount % 1000 -eq 0) {
        Write-Progress -Activity "Hashing and Checking Files" -Status "Processing: $($File.FullName)" -PercentComplete $Progress -CurrentOperation "Checked $FileCount of $($AllFiles.Count) files. Found $MatchCount matches."
    }

    try {
        # Calculate the hash of the current file
        $FileHash = (Get-FileHash -Path $File.FullName -Algorithm SHA256 -ErrorAction Stop).Hash

        # Check if this hash is in the malicious list
        if ($MaliciousHashes -contains $FileHash) {
            $MatchCount++
            Write-Host "[!!!] MALWARE FOUND: $($File.FullName)" -ForegroundColor Red
            Write-Host "     Hash: $FileHash" -ForegroundColor Red
            Write-Host "     This file is confirmed malicious and should be deleted immediately." -ForegroundColor Red
            Write-Host "-----------------------------------------------------------------" -ForegroundColor Red
        }
    }
    catch {
        # Silently skip files that can't be accessed (e.g., in use by system, permission denied)
    }
}

Write-Progress -Activity "Hashing and Checking Files" -Completed

# Output results
if ($MatchCount -eq 0) {
    Write-Host "[+] Scan complete. No files matching the known malicious hashes were found." -ForegroundColor Green
    Write-Host "[+] This is a very strong indicator that the malware payload is not present on your system." -ForegroundColor Green
} else {
    Write-Host "[!] Scan complete. Found $MatchCount malicious file(s). See above for paths." -ForegroundColor Red
}

# Revert the execution policy for this session
Set-ExecutionPolicy Restricted -Scope Process -Force

Write-Host "`nPress any key to exit..."
$Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown") > $null